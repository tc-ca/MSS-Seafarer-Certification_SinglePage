@inject ILanguageContainerService languageContainer
@inject CDN_Application.Services.UserPreference userPreference
@inject NavigationManager navigationManager
@inject IJSRuntime JSRuntime
@page "/"
@page "/en"
@page "/fr"

    <h1>@languageContainer.Keys["ApplicationName"]</h1>
<nav aria-label="progress" class="step-indicator">
    <ul class="steps">
        <li class="@this.StepClasses[0]">
            @languageContainer.Keys["APPLICANT_DETAILS"]
        </li>
        <li class="@this.StepClasses[1]">
            @languageContainer.Keys["MAILING_ADDRESS"]<span class="sr-only">not completed</span>
        </li>
        <li class="@this.StepClasses[2]">
            @languageContainer.Keys["IDENTITY_DOCUMENTS"]<span class="sr-only">not completed</span>
        </li>
        <li class="@this.StepClasses[3]">
            @languageContainer.Keys["REMARKS_AND_SIGNATURE"]<span class="sr-only">not completed</span>
        </li>
    </ul>
</nav>

<DisclaimerTag @bind-IsVisible="this.VisiblePages[0]"
               @bind-IsVisible:event="IsVisibleChanged"></DisclaimerTag>
<PersonalInfoTag PersonalInformation="application.PersonalInformation"
                 @bind-IsVisible="this.VisiblePages[1]"
                 @bind-IsVisible:event="IsVisibleChanged"></PersonalInfoTag>
<AddressTag Address="application.Address"
            @bind-IsVisible="this.VisiblePages[2]"
            @bind-IsVisible:event="IsVisibleChanged"></AddressTag>
<IdentityDocumentsTag @bind-IsVisible="this.VisiblePages[3]"
                      @bind-IsVisible:event="IsVisibleChanged"></IdentityDocumentsTag>
<SignatureTag @bind-IsVisible="this.VisiblePages[4]"
              @bind-IsVisible:event="IsVisibleChanged"></SignatureTag>
<button class="btn btn-primary" @onclick="OnClickChangeTags">@languageContainer.Keys["Next"]</button>


@code
{
    private readonly int MAX_PAGE_COUNTER = 4;
    public int pageCounter = 0;

    [Parameter]
    public bool[] VisiblePages { get; set; } = new bool[5];

    [Parameter]
    public string[] StepClasses { get; set; } = new string[4];

    private string CurrentLanguage { get; set; }

    private CdnApplication application { get; set; }

    protected override void OnInitialized()
    {
        application = new CdnApplication();

        var current_url = navigationManager.Uri;

        if (IsFrenchURL(current_url))
        {
            this.setupFrenchLanguage();
        }
        else
        {
            this.setupEnglishLanguage();
        }

        JSRuntime.InvokeVoidAsync("ChangeLanguageLinkText", CurrentLanguage);

        this.pageCounter = userPreference.CurrentPageIndex;
        this.SetDefaultVisiblePage();
    }

    private void setupFrenchLanguage()
    {
        this.CurrentLanguage = "French";
        languageContainer.SetLanguage(System.Globalization.CultureInfo.GetCultureInfo("fr-CA"));
        userPreference.LanguagePreference = "French";
    }

    private void setupEnglishLanguage()
    {
        this.CurrentLanguage = "English";
        languageContainer.SetLanguage(System.Globalization.CultureInfo.GetCultureInfo("en-CA"));
        userPreference.LanguagePreference = "English";
    }

    private void OnClickChangeTags()
    {
        if(this.isFirstPage())
        {
            this.resetStepClasses();
        }

        this.resetVisiblePages();
        this.VisiblePages[this.pageCounter] = true;

        var stepClassCounter = this.pageCounter - 1;
        this.markCompletedPages();

        if (this.isStepperCurrentlyTheActivePage(stepClassCounter))
        {
            this.StepClasses[stepClassCounter] = "active";
        }

        this.increasePageCounter();
    }

    private void markCompletedPages()
    {
        for (var i = 0; i < this.pageCounter && i < this.StepClasses.Length; i++)
        {
            this.StepClasses[i] = "complete";
        }
    }

    private bool isFirstPage()
    {
        return this.pageCounter == 0;
    }

    private void increasePageCounter()
    {
        pageCounter++;

        if (this.pageCounter > this.MAX_PAGE_COUNTER)
        {
            this.pageCounter = 0;
        }

        userPreference.CurrentPageIndex = pageCounter;
    }

    private bool isStepperCurrentlyTheActivePage(int stepCounter)
    {
        return stepCounter < this.StepClasses.Length && stepCounter >= 0;
    }

    private void resetStepClasses()
    {
        for (var i = 0; i < this.StepClasses.Length; i++)
        {
            this.StepClasses[i] = "";
        }
    }

    private void resetVisiblePages()
    {
        for(var i = 0; i < this.VisiblePages.Length; i++)
        {
            this.VisiblePages[i] = false;
        }
    }

    private void SetDefaultVisiblePage()
    {
        this.VisiblePages[0] = true;
    }

    private bool IsFrenchURL(string url)
    {
        bool isFrench = false;
        if (url != null)
        {
            int length = url.Length;
            int startIndexOfFR = length - 2;


            var lastTwoLetters = url.Substring(startIndexOfFR, 2);
            if (lastTwoLetters == "fr")
            {
                isFrench = true;
            }
        }

        return isFrench;
    }
}
